#!/usr/bin/env node
var yargs = require('yargs');
var chalk = require('chalk');
var path = require('path');
var pkg = require('../package.json');

var argv = require('yargs')
	.usage('Usage: $0 <command> [options]')
	.alias('v', 'version')
	.describe('v', 'Display migrat version number')
	.alias('c', 'config')
	.describe('c', 'Specify config file path')
	.alias('h', 'help')
	.describe('help', 'Display usage information')
	.alias('t', 'to')
	.describe('t', 'Specify migration filename to migrate to')
	.alias('j', 'json')
	.describe('j', 'Output as JSON (only applies to --dry-run)')
	.alias('s', 'silent')
	.describe('s', 'Disable all output')
	.describe('dry-run', 'Do not execute any migrations, just display the migration plan')
	.parse(process.argv);

function displayHelp() {
	yargs.showHelp();
	console.log('Examples:');
	console.log('  $ migrat init');
	console.log('  $ migrat status');
	console.log('  $ migrat up');
	console.log('  $ migrat down --to <filename>');
	console.log('  $ migrat create <name>');
	console.log('');
	console.log('Commands:');
	console.log('  "' + chalk.bold('init') + '"    Creates a new migrat project in the current directory.');
	console.log('            ' + chalk.gray('$ migrat init'));
	console.log('');
	console.log('  "' + chalk.bold('create') + '"  Creates a new migration file.');
	console.log('            ' + chalk.gray('$ migrat create <name>'));
	console.log('');
	console.log('  "' + chalk.bold('up') + '"      Executes migrations that haven\'t run yet in a oldest-to-newest order. If no');
	console.log('            --to argument is given, it will attempt to migrate to the newest migration. If');
	console.log('            on is provided, it will run up to (and include) the specified migration.');
	console.log('            ' + chalk.gray('$ migrat up'));
	console.log('            ' + chalk.gray('$ migrat up --dry-run'));
	console.log('            ' + chalk.gray('$ migrat up --to <filename>'));
	console.log('');
	console.log('  "' + chalk.bold('down') + '"    Reverts migrations that have run in a newest-to-oldest order. The --to argument');
	console.log('            required. It will call the "down" method down to (but not including) --to.');
	console.log('            ' + chalk.gray('$ migrat up --to <filename> --dry-run'));
	console.log('            ' + chalk.gray('$ migrat up --to <filename>'));
	console.log('');
	console.log('  "' + chalk.bold('unlock') + '"  Use to release a lock that may not have been released properly, like on program crash.');
	console.log('            ' + chalk.gray('$ migrat unlock'));
	console.log('');
}

if (argv.version) {
	console.log(pkg.version);
	console.log('');
	process.exit(0);
}
if (argv.help) {
	displayHelp();
	process.exit(0);
}

// parse options
var command, action = process.argv[2];
if (!action) {
	displayHelp();
	process.exit(1);
}

// execute command
if (!/^[a-z]+$/.test(action)) {
	console.error('Unrecognized command: "' + action + '"');
	process.exit(1);
}
try { command = require('../lib/Commands/' + action + '.js'); }
catch (e) {
	if (e) console.error(e);
	console.error('Unrecognized command: "' + action + '"');
	process.exit(1);
}

command(argv, function(err) {
	if (err) {
		console.error(err.message || err);
		process.exit(1);
	} else {
		process.exit(0);
	}
});
